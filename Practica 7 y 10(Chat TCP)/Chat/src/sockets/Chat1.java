package sockets;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

public class Chat1 extends javax.swing.JFrame implements Runnable {

    Paquete datos = new Paquete();
    ArrayList contactos = new ArrayList();
    ArrayList contactosNick = new ArrayList();
    String ipLocal;
    DefaultListModel<String> modeloList = new DefaultListModel<>();

    /**
     * Creates new form Chat1
     */
    public Chat1() {
        initComponents();

        this.jListContactos.setModel(modeloList);
        Thread hilo = new Thread(this);
        hilo.start();       
        inicio();
        eventoFrame evtWindw = new eventoFrame();
        this.addWindowListener(evtWindw);
        this.jTextFieldMensaje.setEnabled(false);
        
    }

    private void inicio() {
        try {
            Socket Socket = new Socket("25.40.23.188", 9001);
            String user = JOptionPane.showInputDialog("Ingrese un Nombre de usuario para hacer uso del chat");
            datos.setUsuario(user);
            datos.setMensaje("7/2*ghg456Z");
            ObjectOutputStream salida = new ObjectOutputStream(Socket.getOutputStream());
            salida.writeObject(datos);
            salida.close();
            datos.setMensaje("");
        } catch (IOException ex) {
            Logger.getLogger(Chat1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void textoRojo(SimpleAttributeSet attrs, JTextPane text, String string) {

        StyleConstants.setForeground(attrs, Color.red);

        try {
            text.getStyledDocument().insertString(
                    text.getStyledDocument().getLength(), string, attrs);
        } catch (BadLocationException ex) {
            Logger.getLogger(Chat1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void textoAzul(SimpleAttributeSet attrs, JTextPane text, String string) {

        StyleConstants.setForeground(attrs, Color.blue);

        try {
            text.getStyledDocument().insertString(
                    text.getStyledDocument().getLength(), string, attrs);
        } catch (BadLocationException ex) {
            Logger.getLogger(Chat1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void nuevaLinea(JTextPane text) {

        try {
            text.getStyledDocument().insertString(
                    text.getStyledDocument().getLength(),
                    System.getProperty("line.separator"), null);
        } catch (BadLocationException ex) {
            Logger.getLogger(Chat1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void enviarMensaje() {
        String mensaje = jTextFieldMensaje.getText();
        int index = jListContactos.getSelectedIndex();
        String ipDestino = (String) contactos.get(index);
        
        if (mensaje.isEmpty() || ipDestino.isEmpty()) {
        } else {
            try {
                Socket Socket = new Socket("25.40.23.188", 9001);
                datos.setMensaje(mensaje);
                datos.setIp(ipDestino);
                ObjectOutputStream salida = new ObjectOutputStream(Socket.getOutputStream());
                salida.writeObject(datos);
                salida.close();

                SimpleAttributeSet attrs = new SimpleAttributeSet();
                textoRojo(attrs, jTextPaneMensajes, datos.getUsuario() + ":          " + mensaje);
                nuevaLinea(jTextPaneMensajes);
                jTextFieldMensaje.setText("");

            } catch (IOException ex) {
                Logger.getLogger(Chat1.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "No se pudo enviar el mensaje");
            }

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldMensaje = new javax.swing.JTextField();
        jButtonEnviar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPaneMensajes = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListContactos = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabelChat = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CHAT");
        setResizable(false);

        jTextFieldMensaje.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldMensaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldMensajeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldMensajeKeyTyped(evt);
            }
        });

        jButtonEnviar.setText("Enviar");
        jButtonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnviarActionPerformed(evt);
            }
        });

        jTextPaneMensajes.setEditable(false);
        jTextPaneMensajes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jScrollPane2.setViewportView(jTextPaneMensajes);

        jListContactos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListContactos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListContactosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListContactos);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CONTACTOS");

        jLabelChat.setText("CHAT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jLabelChat, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jTextFieldMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelChat, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnviarActionPerformed

        enviarMensaje();
    }//GEN-LAST:event_jButtonEnviarActionPerformed

    private void jTextFieldMensajeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMensajeKeyTyped

    }//GEN-LAST:event_jTextFieldMensajeKeyTyped

    private void jTextFieldMensajeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMensajeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            enviarMensaje();
        }
    }//GEN-LAST:event_jTextFieldMensajeKeyPressed

    private void jListContactosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListContactosMouseClicked
       this.jTextFieldMensaje.setEnabled(true);
    }//GEN-LAST:event_jListContactosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEnviar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelChat;
    private javax.swing.JList<String> jListContactos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldMensaje;
    private javax.swing.JTextPane jTextPaneMensajes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            Paquete recibido = new Paquete();
            ServerSocket ss = new ServerSocket(9032);
            while (true) {
                Socket s = ss.accept();
                ObjectInputStream entrada = new ObjectInputStream(s.getInputStream());
                recibido = (Paquete) entrada.readObject();

                if (recibido.getMensaje().equals("7/2*ghg456Z")) {
                    modeloList.addElement(recibido.getUsuario());
                    contactos.add(recibido.getIp());
                    contactosNick.add(recibido.getUsuario());
                }
                if (recibido.getMensaje().equals("2ñs*ñsfd/45*E")) {
                    modeloList.removeAllElements();
                    this.jListContactos.repaint();
                    for (int i = 0; i < contactos.size(); i++) {
                        if (contactos.get(i).equals(recibido.getIp())) {
                            contactos.remove(i);
                            contactosNick.remove(i);
                        } else {
                            modeloList.addElement((String) contactosNick.get(i));
                        }

                    }

                }
                if ((!recibido.getMensaje().equals("7/2*ghg456Z")) && (!recibido.getMensaje().equals("2ñs*ñsfd/45*E"))) {
                    SimpleAttributeSet attrs = new SimpleAttributeSet();
                    textoAzul(attrs, jTextPaneMensajes, recibido.getUsuario() + ":          " + recibido.getMensaje());
                    nuevaLinea(jTextPaneMensajes);
                    s.close();
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(Chat1.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Chat1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
class Paquete implements Serializable {

    String usuario, ip, mensaje;

    Paquete() {

    }

    public String getUsuario() {
        return usuario;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    public String getMensaje() {
        return mensaje;
    }

    public void setMensaje(String mensaje) {
        this.mensaje = mensaje;
    }
}

class eventoFrame implements WindowListener {

    public eventoFrame() {

    }

    @Override
    public void windowOpened(WindowEvent we) {
    }

    @Override
    public void windowClosing(WindowEvent we) {
        Paquete datos = new Paquete();
        try {
            Socket Socket = new Socket("25.40.23.188", 9001);
            datos.setMensaje("2ñs*ñsfd/45*E");
            ObjectOutputStream salida = new ObjectOutputStream(Socket.getOutputStream());
            salida.writeObject(datos);
            salida.close();
        } catch (IOException ex) {
            Logger.getLogger(Chat1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void windowClosed(WindowEvent we) {
    }

    @Override
    public void windowIconified(WindowEvent we) {
    }

    @Override
    public void windowDeiconified(WindowEvent we) {
    }

    @Override
    public void windowActivated(WindowEvent we) {
    }

    @Override
    public void windowDeactivated(WindowEvent we) {
    }

}
